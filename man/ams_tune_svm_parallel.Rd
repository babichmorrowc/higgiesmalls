% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ams_tune_svm_parallel.R
\name{ams_tune_svm_parallel}
\alias{ams_tune_svm_parallel}
\title{Parameter Tuning Using Grid Search to Maximise AMS}
\usage{
ams_tune_svm_parallel(
  METHOD,
  train.x,
  train.y = NULL,
  data = list(),
  training_data_weights = NULL,
  validation.x = NULL,
  ranges = NULL,
  predict.func = predict,
  cross = 5,
  n_cores_use = 16,
  ...
)
}
\arguments{
\item{METHOD}{Either the function to be tuned or a character string naming such a function}

\item{train.x}{Either a formula or a matrix of predictors}

\item{train.y}{The response variable if [train.x] is a predictor matrix. Ignored if [train.x] is a formula}

\item{data}{If formula is used, this is the data set.}

\item{training_data_weights}{Vector of weights of the dataset used}

\item{validation.x}{Optional validation set (see documentation for [e1071::tune])}

\item{ranges}{Named list of parameter vectors}

\item{predict.func}{Optional predict function}

\item{cross}{Number of partitions for cross-validation}

\item{n_cores_use}{Number of cores to use for parallelisation}

\item{...}{Further parameters to be passed to the training functions}
}
\value{
An object of class `tune` including the components:
\itemize{
 \item{[best.parameters] a 1 x k data frame where k is the number of parameters}
 \item{[best.performance]} best achieved performance
 \item{[performances]} A data frame of all parameter combinations along with the corresponding performance results
 \item{[train.ind]} List of index vectors used for splits into training and validation sets
 \item{[best.model]} The model trained on the complete training data using the best parameter combination
}
}
\description{
Parameter Tuning Using Grid Search to Maximise AMS
}
\examples{
\dontrun{
svm_radial_tune <- ams_tune_svm_parallel(svm,
                                         Label ~ .,
                                         data = higgs_training_20,
                                         kernel = "radial",
                                         cross = 5,
                                         training_data_weights = training_weights_20,
                                         ranges = list(
                                           cost = c(0.5, 1, 2),
                                           gamma = c(0.01, 0.1, 0.5)
                                         )
)
}

}
